<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Another</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-10T13:19:31.161Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Another</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven仓库理解和优先级</title>
    <link href="http://yoursite.com/2017/07/10/MavenPriority/"/>
    <id>http://yoursite.com/2017/07/10/MavenPriority/</id>
    <published>2017-07-10T12:45:13.310Z</published>
    <updated>2017-07-10T13:19:31.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/maven-logo.png" alt="此处输入图片的描述"></p>
<p><strong>5 Seven 2017</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 maven 也有一段时间了，有时候在配置 repository,mirror,profile的时候，总会导致 jar 拉取不到。所以认真的分析了 maven 获取 jar 包时候的优先级。<br><a id="more"></a></p>
<h2 id="Maven-仓库的分类"><a href="#Maven-仓库的分类" class="headerlink" title="Maven 仓库的分类"></a>Maven 仓库的分类</h2><p>仓库分类：本地仓库和远程仓库。Maven根据坐标寻找构件的时候，它先会查看本地仓库，如果本地仓库存在构件，则直接使用；如果没有，则从远程仓库查找，找到后，下载到本地。</p>
<p>1）本地仓库<br>默认情况下，每个用户在自己的用户目录下都有一个路径名为.m2/repository/的仓库目录。我们也可以在 settings.xml 文件配置本地仓库的地址</p>
<p>2）远程仓库<br>本地仓库好比书房，而远程仓库就像是书店。对于Maven来说，每个用户只有一个本地仓库，但是可以配置多个远程仓库。</p>
<blockquote>
<p>我们可以在 pom 文件配置多个 repository，但是随着项目越来也多我们每次都要在 pom 文件配置比较麻烦，所以我们可以在<br>settings 文件配置 profile （私服）。这样我们每次创建新项目的时候就可以不用配置 repository。</p>
</blockquote>
<p>3）中央仓库<br>Maven必须要知道至少一个可用的远程仓库，中央仓库就是这样一个默认的远程仓库，Maven 默认有一个 super pom 文件。<br>maven super pom 文件位置<br>D:\apache-maven-3.0.4\lib 下的 maven-model-builder-3.0.4.jar 中的 org/apache/maven/model/pom-4.0.0.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">··· 省略其他</div><div class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>这个时候我们就明白了，我们在 settings 文件配置一个 mirror 的 mirrorOf 为 central 的镜像就会替代 ‘中央仓库’ 的原因了。</p>
<h3 id="Maven-镜像"><a href="#Maven-镜像" class="headerlink" title="Maven 镜像"></a>Maven 镜像</h3><p>镜像（Mirroring）是冗余的一种类型，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。<br>为什么配置镜像?</p>
<blockquote>
<p>1.一句话，你有的我也有，你没有的我也有。（拥有远程仓库的所有 jar，包括远程仓库没有的 jar）<br>2.还是一句话，我跑的比你快。（有时候远程仓库获取 jar 的速度可能比镜像慢，这也是为什么我们一般要配置中央仓库的原因，外国的 maven 仓库一般获取速度比较慢）</p>
</blockquote>
<p>如果你配置 maven 镜像不是为了以上两点，那基本就不用配置镜像了。<br><strong>注意:当远程仓库被镜像匹配到的，则在获取 jar 包将从镜像仓库获取，而不是我们配置的 repository 仓库, repository 将失去作用</strong></p>
<h4 id="mirrorOf-标签"><a href="#mirrorOf-标签" class="headerlink" title="mirrorOf 标签"></a>mirrorOf 标签</h4><p>mirrorOf 标签里面放置的是 repository 配置的 id,为了满足一些复杂的需求，Maven还支持更高级的镜像配置：</p>
<pre><code>external:* = 不在本地仓库的文件才从该镜像获取
repo,repo1 = 远程仓库 repo 和 repo1 从该镜像获取
*,!repo1 =  所有远程仓库都从该镜像获取，除 repo1 远程仓库以外
* = 所用远程仓库都从该镜像获取
</code></pre><h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><p>私服是一种特殊的远程Maven仓库，它是架设在局域网内的仓库服务，私服一般被配置为互联网远程仓库的镜像，供局域网内的Maven用户使用。<br>当Maven需要下载构件的时候，先向私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，同时缓存在私服之上，然后为Maven下载请求提供下载服务，另外，对于自定义或第三方的jar可以从本地上传到私服，供局域网内其他maven用户使用。<br>优点主要有：</p>
<pre><code>1. 节省外网宽带
2. 加速Maven构建
3. 部署第三方构件：可以将公司项目的 jar 发布到私服上，方便项目与项目之间的调用
4. 提高稳定性、增强控制：原因是外网不稳定
5. 降低中央仓库的负荷：原因是中央仓库访问量太大
</code></pre><p><strong>上面大概介绍了 Maven 仓库概念，接下来我们进入正题</strong></p>
<h2 id="Maven-仓库优先级"><a href="#Maven-仓库优先级" class="headerlink" title="Maven 仓库优先级"></a>Maven 仓库优先级</h2><p>为了方便测试，我准备了以下几个仓库</p>
<ul>
<li>172.16.xxx.xxx  远程仓库 （私服）</li>
<li>dev.xxx.wiki 远程仓库  （远程）</li>
<li>localhost 仓库 是我自己在本机搭建的一个仓库 （镜像）</li>
<li>maven.aliyun.com 中央仓库（中央）</li>
</ul>
<h3 id="本地仓库优先级"><a href="#本地仓库优先级" class="headerlink" title="本地仓库优先级"></a>本地仓库优先级</h3><p><img src="/images/example.png" alt="此处输入图片的描述"><br>Maven 本地仓库拥有该包，而远程、镜像、中央、私服都不包含该包。我们来看下 Maven 是怎么获取的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.......</div><div class="line"></div><div class="line"><span class="comment">// 使用本地仓库，优先级(priority)为 10</span></div><div class="line">[DEBUG] Using local repository at E:\OperSource</div><div class="line">[DEBUG] Using manager EnhancedLocalRepositoryManager with priority <span class="number">10.0</span> <span class="keyword">for</span> E:\OperSource</div><div class="line">[INFO] Scanning <span class="keyword">for</span> projects..</div><div class="line"></div><div class="line">........</div><div class="line"></div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\target\demo-<span class="number">1.0</span>-SNAPSHOT.jar to E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\demo-<span class="number">1.0</span>-SNAPSHOT.jar</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\_remote.repositories</div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\pom.xml to E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\demo-<span class="number">1.0</span>-SNAPSHOT.pom</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Installing com.cjf:demo:<span class="number">1.0</span>-SNAPSHOT/maven-metadata.xml to E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\maven-metadata-local.xml</div><div class="line">[DEBUG] Installing com.cjf:demo/maven-metadata.xml to E:\OperSource\com\cjf\demo\maven-metadata-local.xml</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: <span class="number">1.874</span> s</div><div class="line">[INFO] Finished at: <span class="number">2017</span>-<span class="number">07</span>-<span class="number">07</span>T10:<span class="number">37</span>:<span class="number">32</span>+<span class="number">08</span>:<span class="number">00</span></div><div class="line">[INFO] Final Memory: <span class="number">23</span>M/<span class="number">219</span>M</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line"></div><div class="line">Process finished with exit code <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>从上面可以看出 Maven 一开始就使用本地仓库，并将本地仓库的优先级定制为 10 , 最后 jar 包也在本地仓库找到，Maven 成功打包。</p>
<h3 id="远程仓库优先级"><a href="#远程仓库优先级" class="headerlink" title="远程仓库优先级"></a>远程仓库优先级</h3><p>前面我们知道了，本地仓库的优先级是最高的，现在我们继续研究远程仓库的优先级（以下的所有例子，都默认本地仓库不拥有我们需要的包）</p>
<p>这一次我们默认配置 <strong>profile</strong>（私服）为 172.16.xxx.xxx 远程仓库, <strong>repository</strong> 为 dev.xxx.wiki 远程仓库,<strong>mirror</strong> 为本地 localhost 仓库，还配置了一个 <strong>mirrorOf  为 central</strong> 远程仓库为 maven.aliyun.com 的中央仓库,</p>
<p>以下是配置信息<br>settings.xml 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">······</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span> </div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>   <span class="comment">&lt;!--拦截 pom 文件配置的 repository--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>localhost2<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>foo2<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>   <span class="comment">&lt;!--配置一个拦截 foo2 的远程仓库的镜像--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  <span class="comment">&lt;!--覆盖 Maven 默认的配置的中央仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置私服--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.xxx.xxx:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.xxx.xxx:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></div><div class="line"></div><div class="line">······</div></pre></td></tr></table></figure></p>
<p>pom.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--xxx-cif-api 存在 172.16.xxx.xxx 仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cif<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-cif-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Chapter1 存在 localhost 仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cjf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置远程仓库--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://dev.xxx.wiki:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以下是 Maven 拉取包的日志<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">······· 省略部分日志信息</div><div class="line"></div><div class="line">[DEBUG] Using local repository at E:\OperSource</div><div class="line">[DEBUG] Using manager EnhancedLocalRepositoryManager with priority <span class="number">10.0</span> <span class="keyword">for</span> E:\OperSource</div><div class="line">[INFO] Scanning <span class="keyword">for</span> projects...</div><div class="line"></div><div class="line"><span class="comment">// 从这里可以看出我们配置的镜像替代了我们在 pom 配置的远程仓库</span></div><div class="line">[DEBUG] <span class="function">Using mirror <span class="title">localhost</span> <span class="params">(http://localhost:<span class="number">8081</span>/repository/maven-<span class="keyword">public</span>/)</span> <span class="keyword">for</span> <span class="title">foo</span> <span class="params">(http://dev.xxx.wiki:<span class="number">8081</span>/nexus/content/groups/<span class="keyword">public</span>/)</span>.</span></div><div class="line">替代了默认的中央仓库</div><div class="line">[DEBUG] Using mirror <span class="title">alimaven</span> <span class="params">(http://maven.aliyun.com/nexus/content/groups/<span class="keyword">public</span>/)</span> <span class="keyword">for</span> <span class="title">central</span> <span class="params">(https://repo.maven.apache.org/maven2)</span>.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 从这里可以看出 Maven 使用哪些 dependencies 和 plugins 的地址，我们可以看出优先级最高的是 172.16.xxx.xxx,然后就是 localhost 最后才是 maven.aliyun.com</span></div><div class="line"></div><div class="line"><span class="comment">// 注意：alimaven (http://maven.aliyun.com/nexus/content/groups/public/, default, releases) 从这里可以看出中央仓库只能获取 releases 包，所有的 snapshots 包都不从中央仓库获取。（可以看前面 central 的配置信息）</span></div><div class="line">[DEBUG] === PROJECT BUILD PLAN ================================================</div><div class="line">[DEBUG] Project:       com.cjf:demo:<span class="number">1.0</span>-SNAPSHOT</div><div class="line">[DEBUG] Dependencies (collect): []</div><div class="line">[DEBUG] Dependencies (resolve): [compile, runtime, test]</div><div class="line"></div><div class="line">[DEBUG] Repositories (dependencies): [<span class="keyword">public</span> (http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/, default, releases+snapshots), localhost (http://localhost:8081/repository/maven-public/, default, releases+snapshots), alimaven (http://maven.aliyun.com/nexus/content/groups/public/, default, releases)]</span></div><div class="line"></div><div class="line">[DEBUG] Repositories (plugins)     : [<span class="keyword">public</span> (http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public, default, releases+snapshots), alimaven (http://maven.aliyun.com/nexus/content/groups/public/, default, releases)]</span></div><div class="line"></div><div class="line"></div><div class="line">[DEBUG] =======================================================================</div><div class="line"><span class="comment">// 寻找本地是否有 maven-metadata.xml 配置文件 ，从这里可以看出寻找不到（后面会详细讲该文件作用）</span></div><div class="line">[DEBUG] Could not find metadata com.xxx.cif:xxx-cif-api:<span class="number">0.0</span>.1-SNAPSHOT/maven-metadata.<span class="function">xml in <span class="title">local</span> <span class="params">(E:\OperSource)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 由于寻找不到 Maven 只能从我们配置的远程仓库寻找，由于 Maven 也不知道那个仓库才有，所以同时寻找两个仓库</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\resolver-status.properties</div><div class="line"></div><div class="line"><span class="comment">// 从这里可以看出在 172.16.xxx.xxx 找到  xxx-cif-api 的 maven-metadata.xml 文件并下载下来</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/maven-metadata.xml (781 B at 7.0 KB/sec)</span></div><div class="line"></div><div class="line"><span class="comment">// 追踪文件，resolver-status.properties 配置了 jar 包下载地址和时间</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\resolver-status.properties</div><div class="line">[DEBUG] Could not find metadata com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml in <span class="title">localhost</span> <span class="params">(http://localhost:<span class="number">8081</span>/repository/maven-<span class="keyword">public</span>/)</span></div><div class="line"></div><div class="line"><span class="comment">// 在 localhost 远程仓库寻找不到 xxx-cif-api 的 maven-metadata.xml</span></div><div class="line">[DEBUG] Could not find metadata com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml in <span class="title">local</span> <span class="params">(E:\OperSource)</span></div><div class="line"></div><div class="line"><span class="comment">// 跳过的远程请求 </span></div><div class="line">[DEBUG] Skipped remote request <span class="keyword">for</span> com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml, already updated during <span class="keyword">this</span> session.</div><div class="line">[DEBUG] Skipped remote request <span class="keyword">for</span> com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml, already updated during <span class="keyword">this</span> session.</div><div class="line"></div><div class="line"><span class="comment">// 默认以后获取 xxx-cif-api 的时候将不在从 localhost 寻找了，除非强制获取才会再次从 localhost 寻找这个包</span></div><div class="line">[DEBUG] Failure to find com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml in http:<span class="comment">//localhost:8081/repository/maven-public/ was cached in the local repository, resolution will not be reattempted until the update interval of localhost has elapsed or updates are forced</span></div><div class="line"></div><div class="line"><span class="comment">// 将 172.16.xxx.xxx 优先级升为 0 ，并下载 xxx-cif-api 的 pom 文件</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.pom</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.pom (930 B at 82.6 KB/sec)</span></div><div class="line"></div><div class="line"><span class="comment">// _remote.repositories 记录的以后使用那个远程仓库获取 （ps:这个文件作用我要不是很清楚作用，以上观点是自己推测出来的。）</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\xxx-cif-api-0.0.1-20170515.040917-89.pom.lastUpdated</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 后面获取 Chapter1 包的流程跟 com.xxx.cif 是一样的，不过最后是在 localhost 寻找到而已，所以这分日志就不贴出来了。</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 最后在下载包的时候，都到对应的仓库下载</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.jar</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/util/xxx-util/0.0.1-SNAPSHOT/xxx-util-0.0.1-20170514.091041-31.jar</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/util/xxx-util/0.0.1-SNAPSHOT/xxx-util-0.0.1-20170514.091041-31.jar (26 KB at 324.2 KB/sec)</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.jar (68 KB at 756.6 KB/sec)</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\xxx-cif-api-0.0.1-20170515.040917-89.jar.lastUpdated</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\util\xxx-util\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\util\xxx-util\0.0.1-SNAPSHOT\xxx-util-0.0.1-20170514.091041-31.jar.lastUpdated</div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-public/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170708.092339-1.jar</span></div><div class="line">Downloaded: http:<span class="comment">//localhost:8081/repository/maven-public/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170708.092339-1.jar (8 KB at 167.0 KB/sec)</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\Chapter1\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\Chapter1\0.0.1-SNAPSHOT\Chapter1-0.0.1-20170708.092339-1.jar.lastUpdated</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\target\demo-1.0-SNAPSHOT.jar to E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\demo-1.0-SNAPSHOT.jar</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\_remote.repositories</div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\pom.xml to E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\demo-1.0-SNAPSHOT.pom</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Installing com.cjf:demo:1.0-SNAPSHOT/maven-metadata.xml to E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\maven-metadata-local.xml</div><div class="line">[DEBUG] Installing com.cjf:demo/maven-metadata.xml to E:\OperSource\com\cjf\demo\maven-metadata-local.xml</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 10.549 s</div><div class="line">[INFO] Finished at: 2017-07-09T18:13:20+08:00</div><div class="line">[INFO] Final Memory: 26M/219M</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line"></div><div class="line">·······</div></pre></td></tr></table></figure></p>
<p>好了，看了这么多的配置文件信息和日志信息，我们也总结一下 Maven 远程仓库优先级了。</p>
<p>主要有以下几点：<br>1.从日志信息我们得出这几种maven仓库的优先级别为</p>
<blockquote>
<p>本地仓库 &gt; 私服 （profile）&gt; 远程仓库（repository）和 镜像 （mirror） &gt; 中央仓库 （central）</p>
</blockquote>
<p>2.镜像是一个特殊的配置，其实镜像等同与远程仓库，没有匹配远程仓库的镜像就毫无作用（如 foo2）。<br>3.总和上面所说的，Maven 仓库的优先级就是 <strong>私服和远程仓库</strong> 的对比，没有其它的仓库类型。为什么这么说是因为，镜像等同远程，而中央其实也是 maven super xml 配置的一个repository 的一个而且。所以 maven 仓库真正的优先级为 </p>
<blockquote>
<p>本地仓库 &gt; 私服（profile）&gt; 远程仓库（repository）</p>
</blockquote>
<h2 id="maven-metadata-xml-文件"><a href="#maven-metadata-xml-文件" class="headerlink" title="maven-metadata.xml 文件"></a>maven-metadata.xml 文件</h2><p>Maven Repository Metadata 可用于表示：</p>
<pre><code>1. 一个没有版本的工件：它提供有关该工件的可用版本的信息
2. 快照伪像：它提供有关快照的精确信息
3. 包含Maven插件工件的组：它提供了有关此组中可用插件的信息。
</code></pre><p>元数据文件名是：</p>
<pre><code>远程存储库中的 maven-metadata.xml，
maven-metadata- &lt;repo-id&gt;.xml在本地存储库中，用于具有repo-id标识符的存储库中的元标记。
</code></pre><p>以上是 Maven 官网对该文件的解释。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>问题：有时候我们更新最新包的时候，会发现最新的包被拉取下来的，但是项目使用的包还是旧的包。所以我们要分析下是什么原因导致的。</p>
<p>首先我们先大概的了解下 maven-metadata.xml  文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">metadata</span> <span class="attr">modelVersion</span>=<span class="string">"1.1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cjf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">versioning</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">snapshot</span>&gt;</span>                               <span class="comment">&lt;!--当前版本下的最新快照信息--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span>20170710.071727<span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span> <span class="comment">&lt;!--快照的时间戳--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">buildNumber</span>&gt;</span>6<span class="tag">&lt;/<span class="name">buildNumber</span>&gt;</span>           <span class="comment">&lt;!--构件号--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">snapshot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">lastUpdated</span>&gt;</span>20170710071727<span class="tag">&lt;/<span class="name">lastUpdated</span>&gt;</span><span class="comment">&lt;!--metadata文件被更新的时间--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">snapshotVersions</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">snapshotVersion</span>&gt;</span>                      <span class="comment">&lt;!--当前版本下可用的子快照版本信息--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">extension</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.1-20170710.071727-6<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!--子快照版本的信息--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">updated</span>&gt;</span>20170710071727<span class="tag">&lt;/<span class="name">updated</span>&gt;</span>     <span class="comment">&lt;!--这个子快照版本的更新时间--&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">snapshotVersion</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">snapshotVersion</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">extension</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.1-20170710.071727-6<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">updated</span>&gt;</span>20170710071727<span class="tag">&lt;/<span class="name">updated</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">snapshotVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">snapshotVersions</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">versioning</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中 lastUpdated 是最中要的一个属性，Maven 更新工程的 jar包时，会比较 lastUpdated 时间戳值，哪个值更大，就以哪个文件为准。</p>
<p>接下来我们看下 Maven 为我们生成了那些文件<br><img src="http://orbs83j4x.bkt.clouddn.com/20170710163449.png" alt="此处输入图片的描述"><br>我们可以看到 maven-metadata.xml 一共有三个</p>
<pre><code>1. maven-metadata-local.xml 本地的元数据, Maven install 的时候就会生成。
2. maven-metadata-snapshots.xml Maven deploy 时会生成
3. maven-metadata-localhost.xml 远程仓库获取的时候生成 (repository 的 id = localhost)
</code></pre><p>以上的文件其实都是 Maven 的过渡文件而已</p>
<ol>
<li>例如 maven-metadata-snapshots 就是 Maven deploy 先从远程仓库对应包的 maven-metadata.xml 下载下来，然后修改快照信息后在上传到远程仓库上。</li>
<li>例如 maven-metadata-localhost 的作用是在 Maven 在拉取包的时候，会先跟本地 maven-metadata-local 比较下 lastUpdated 时间戳值，值大用哪个。如果是 Mavne <strong>强制更新</strong> 的时候(没有强制更新是不会) 会下载远程的 maven-metadata.xml 比较<strong>远程，本地，和之前远程保存下来的 maven-metadata 文件</strong>。</li>
</ol>
<p>我们验证下 Maven deploy 例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[INFO] --- maven-deploy-plugin:<span class="number">2.8</span>.2:deploy (<span class="keyword">default</span>-deploy) @ Chapter1 ---</div><div class="line"><span class="comment">// 先从远程下载快照 maven-metadata.xml</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">Downloaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml (768 B at 3.3 KB/sec)</span></div><div class="line"><span class="comment">// 将项目的 jar 和 pom 文件更新到远程仓库</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.jar</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.jar (8 KB at 14.1 KB/sec)</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.pom</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.pom (2 KB at 2.0 KB/sec)</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml</span></div><div class="line">Downloaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml (275 B at 1.6 KB/sec)</span></div><div class="line"><span class="comment">// 上传  maven-metadata.xml 到远程仓库</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml (768 B at 1.0 KB/sec)</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml (275 B at 0.4 KB/sec)</span></div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: <span class="number">5.231</span> s</div><div class="line">[INFO] Finished at: <span class="number">2017</span>-<span class="number">07</span>-<span class="number">10</span>T20:<span class="number">13</span>:<span class="number">13</span>+<span class="number">08</span>:<span class="number">00</span></div><div class="line">[INFO] Final Memory: <span class="number">19</span>M/<span class="number">226</span>M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本以为两天就写好这篇文章，在自己理清思路的时候总是被自己绕晕了。比如在 Nexus 的 Central 配置的中央仓库获取，和 maven-metadata.xml 是如何比较的。</p>
<p>如果以上文章有误，等博客的评论系统搭建起来后欢迎大家指认出来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/maven-logo.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5 Seven 2017&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用 maven 也有一段时间了，有时候在配置 repository,mirror,profile的时候，总会导致 jar 拉取不到。所以认真的分析了 maven 获取 jar 包时候的优先级。&lt;br&gt;
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot启动流程详解</title>
    <link href="http://yoursite.com/2017/06/18/%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/06/18/环境/</id>
    <published>2017-06-18T09:09:39.454Z</published>
    <updated>2017-07-10T13:07:48.096Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/springImage.jpg" alt=""></p>
<p><strong>22 June 2017</strong></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文基于Spring Boot版本1.5.3, 使用了spring-boot-starter-web。<br>配置完成后，编写了代码如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">public class Application &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@RestController</div><div class="line">public class RootController &#123;</div><div class="line"></div><div class="line">    @GetMapping(&quot;/&quot;)</div><div class="line">    public String welcome() &#123;</div><div class="line">        return &quot;Welcome!&quot;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然只有几行代码，但是这已经是一个完整的Web程序，当访问url的path部分为”/”时，返回字符串”Welcome!”。</p>
<h2 id="SpringApplication类的静态run方法"><a href="#SpringApplication类的静态run方法" class="headerlink" title="SpringApplication类的静态run方法"></a>SpringApplication类的静态run方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line">public static ConfigurableApplicationContext run(Object source, String... args) &#123;</div><div class="line">	return run(new Object[] &#123; source &#125;, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static ConfigurableApplicationContext run(Object[] sources, String[] args) &#123;</div><div class="line">	return new SpringApplication(sources).run(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个静态方法中，创建SpringApplication对象，并调用该对象的run方法。</p>
<h2 id="构造SpringApplication对象"><a href="#构造SpringApplication对象" class="headerlink" title="构造SpringApplication对象"></a>构造SpringApplication对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line">public SpringApplication(Object... sources) &#123;</div><div class="line">	initialize(sources);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void initialize(Object[] sources) &#123;</div><div class="line">	// 为成员变量sources赋值</div><div class="line">	if (sources != null &amp;&amp; sources.length &gt; 0) &#123;</div><div class="line">		this.sources.addAll(Arrays.asList(sources));</div><div class="line">	&#125;</div><div class="line">	this.webEnvironment = deduceWebEnvironment();</div><div class="line">	setInitializers((Collection) getSpringFactoriesInstances(</div><div class="line">			ApplicationContextInitializer.class));</div><div class="line">	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</div><div class="line">	this.mainApplicationClass = deduceMainApplicationClass();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数中调用initialize方法，初始化SpringApplication对象的成员变量<strong>sources，webEnvironment，initializers，listeners，mainApplicationClass</strong>。sources的赋值比较简单，就是我们传给SpringApplication.run方法的参数。剩下的几个，我们依次来看看是怎么做的。</p>
<h2 id="首先是webEnvironment"><a href="#首先是webEnvironment" class="headerlink" title="首先是webEnvironment:"></a>首先是webEnvironment:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line">private boolean webEnvironment; </div><div class="line"></div><div class="line">private static final String[] WEB_ENVIRONMENT_CLASSES = &#123; &quot;javax.servlet.Servlet&quot;,</div><div class="line">			&quot;org.springframework.web.context.ConfigurableWebApplicationContext&quot; &#125;;</div><div class="line"></div><div class="line">private void initialize(Object[] sources) &#123;</div><div class="line">	...</div><div class="line">        // 为成员变量webEnvironment赋值</div><div class="line">        this.webEnvironment = deduceWebEnvironment();</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean deduceWebEnvironment() &#123;</div><div class="line">	for (String className : WEB_ENVIRONMENT_CLASSES) &#123;</div><div class="line">		if (!ClassUtils.isPresent(className, null)) &#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static boolean isPresent(String className, ClassLoader classLoader) &#123;</div><div class="line">	try &#123;</div><div class="line">	    // 从当前线程获取一个 上下文 ClassLoader，并尝试初始化该类</div><div class="line">		forName(className, classLoader);</div><div class="line">		return true;</div><div class="line">	&#125;</div><div class="line">	catch (Throwable ex) &#123;</div><div class="line">		// 加载类不存在时</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到webEnvironment是一个boolean，该成员变量用来表示当前应用程序是不是一个Web应用程序。那么怎么决定当前应用程序是否Web应用程序呢，是通过在classpath中查看是否存在WEB_ENVIRONMENT_CLASSES这个数组中所包含的类，如果存在那么当前程序即是一个Web应用程序，反之则不然。在本文的例子中webEnvironment的值为true。</p>
<h2 id="然后是initializers"><a href="#然后是initializers" class="headerlink" title="然后是initializers:"></a>然后是initializers:</h2><p>initializers成员变量，是一个ApplicationContextInitializer类型对象的集合。 顾名思义，ApplicationContextInitializer是一个可以用来初始化ApplicationContext的接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line">private List&lt;ApplicationContextInitializer&lt;?&gt;&gt; initializers;</div><div class="line"></div><div class="line">private void initialize(Object[] sources) &#123;</div><div class="line">	...</div><div class="line">	// 为成员变量initializers赋值</div><div class="line">	setInitializers((Collection) getSpringFactoriesInstances(</div><div class="line">			ApplicationContextInitializer.class));</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void setInitializers(</div><div class="line">		Collection&lt;? extends ApplicationContextInitializer&lt;?&gt;&gt; initializers) &#123;</div><div class="line">	this.initializers = new ArrayList&lt;ApplicationContextInitializer&lt;?&gt;&gt;();</div><div class="line">	this.initializers.addAll(initializers);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，关键是调用<strong>getSpringFactoriesInstances(ApplicationContextInitializer.class)</strong>，来获取ApplicationContextInitializer类型对象的列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line">private &lt;T&gt; Collection&lt;? extends T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type) &#123;</div><div class="line">	return getSpringFactoriesInstances(type, new Class&lt;?&gt;[] &#123;&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private &lt;T&gt; Collection&lt;? extends T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type,</div><div class="line">		Class&lt;?&gt;[] parameterTypes, Object... args) &#123;</div><div class="line">	ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">	// Use names and ensure unique to protect against duplicates</div><div class="line">	Set&lt;String&gt; names = new LinkedHashSet&lt;String&gt;(</div><div class="line">			SpringFactoriesLoader.loadFactoryNames(type, classLoader));</div><div class="line">	List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</div><div class="line">			classLoader, args, names);</div><div class="line">	AnnotationAwareOrderComparator.sort(instances);</div><div class="line">	return instances;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该方法中，首先通过调用SpringFactoriesLoader.loadFactoryNames(type, classLoader)来获取所有Spring Factories的名字，然后调用createSpringFactoriesInstances方法根据读取到的名字创建对象。最后会将创建好的对象列表排序并返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.core.io.support.SpringFactoriesLoader</div><div class="line"></div><div class="line">public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</div><div class="line"></div><div class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) &#123;</div><div class="line">		String factoryClassName = factoryClass.getName();</div><div class="line">		try &#123;</div><div class="line">		    // 从当前程序或从系统获取  META-INF/spring.factories</div><div class="line">			Enumeration&lt;URL&gt; urls = (classLoader != null ? </div><div class="line">			        classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</div><div class="line">					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</div><div class="line">					</div><div class="line">			List&lt;String&gt; result = new ArrayList&lt;String&gt;();</div><div class="line">			while (urls.hasMoreElements()) &#123;</div><div class="line">				URL url = urls.nextElement();</div><div class="line">				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));</div><div class="line">				String factoryClassNames = properties.getProperty(factoryClassName);</div><div class="line">				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</div><div class="line">			&#125;</div><div class="line">		</div><div class="line">			return result;</div><div class="line">		&#125;</div><div class="line">		catch (IOException ex) &#123;</div><div class="line">			throw new IllegalArgumentException(&quot;Unable to load [&quot; + factoryClass.getName() +</div><div class="line">					&quot;] factories from location [&quot; + FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，是从一个名字叫spring.factories的资源文件中，读取key为org.springframework.context.ApplicationContextInitializer的value。而spring.factories的部分内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">以下内容摘自spring-boot-1.5.3.RELEASE.jar中的资源文件META-INF/spring.factories</div><div class="line"></div><div class="line"># Application Context Initializers</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.web.ServerPortInfoApplicationContextInitializer</div><div class="line"></div><div class="line">以下内容摘自spring-boot-autoconfigure-1.5.3.RELEASE.jar中的资源文件META-INF/spring.factories</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</div><div class="line">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</div></pre></td></tr></table></figure></p>
<p>可以看到，最近的得到的，是ConfigurationWarningsApplicationContextInitializer，ContextIdApplicationContextInitializer，DelegatingApplicationContextInitializer，ServerPortInfoApplicationContextInitializer这四个类的名字。<br>接下来会调用createSpringFactoriesInstances来创建ApplicationContextInitializer实例。</p>
<p>还有就是基于 autoconfigure 下的两个 SharedMetadataReaderFactoryContextInitializer 共享元数据的一系列操作，AutoConfigurationReportLoggingInitializer监听到系统事件时，比如上下文刷新ContextRefreshedEvent或应用程序启动故障ApplicationFailedEvent之类的事件。</p>
<p>如果添加其他 jar 包，包下带有 spring.factories 也会初始化对应的配置类，例如添加 spring-boot-devtools-1.5.3.RELEASE.jar 启动的时候会初始化<br>org.springframework.boot.devtools.restart.RestartScopeInitializer</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">createSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></div><div class="line">		Class&lt;?&gt;[] parameterTypes, ClassLoader classLoader, Object[] args,</div><div class="line">		Set&lt;String&gt; names) &#123;</div><div class="line">	List&lt;T&gt; instances = <span class="keyword">new</span> ArrayList&lt;T&gt;(names.size());</div><div class="line">	<span class="keyword">for</span> (String name : names) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);</div><div class="line">			Assert.isAssignable(type, instanceClass);</div><div class="line">			Constructor&lt;?&gt; constructor = instanceClass</div><div class="line">					.getDeclaredConstructor(parameterTypes);</div><div class="line">			T instance = (T) BeanUtils.instantiateClass(constructor, args);</div><div class="line">			instances.add(instance);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">					<span class="string">"Cannot instantiate "</span> + type + <span class="string">" : "</span> + name, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> instances;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以在我们的例子中，SpringApplication对象的成员变量initalizers就被初始化为，ConfigurationWarningsApplicationContextInitializer，ContextIdApplicationContextInitializer，DelegatingApplicationContextInitializer，ServerPortInfoApplicationContextInitializer这四个类的对象组成的list。<br>下图画出了加载的ApplicationContextInitializer，并说明了他们的作用。至于何时应用他们，且听后面慢慢分解。</p>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sequenceDiagram</div><div class="line">A-&gt;&gt;B: How are you?</div><div class="line">B-&gt;&gt;A: Great!</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">graph LR</div><div class="line">A--&gt;B</div></pre></td></tr></table></figure>
<p><img src="https://proglib.io/wp-content/uploads/2017/02/image4144.png" alt="http://orbs83j4x.bkt.clouddn.com/SpringBootApplicationContextInitializer.png"></p>
<p>jar:file:/E:/OperSource/org/springframework/boot/spring-boot/1.5.3.RELEASE/spring-boot-1.5.3.RELEASE.jar!/META-INF/spring.factories<br>jar:file:/E:/OperSource/org/springframework/boot/spring-boot-autoconfigure/1.5.3.RELEASE/spring-boot-autoconfigure-1.5.3.RELEASE.jar!/META-INF/spring.factories</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/springImage.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;22 June 2017&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;本文基于Spring Boot版本1.5.3, 使用了spring-boot-starter-web。&lt;br&gt;配置完成后，编写了代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://yoursite.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
</feed>
